<?php
/**
 * @file
 * Provides API for drag & drop upload features.
 */

require_once dirname(__FILE__) . '/dropzones3.field.inc';

/**
 * Implements hook_help().
 */
function dropzones3_help($path, $arg) {
  if ($path == 'admin/config/media/dropzones3') {
    $output = t('New users are created in !link. ', array(
      '!link' => l(t('AWS Console > Identity and Access Management'), 'https://console.aws.amazon.com/iam'))
    );
    $output .= '<strong>' . t("Be sure to use a credientials for a user with permissions limited to multipart uploading.") . '</strong>';
    return $output;
  }
}

/**
 * Implements hook_permission().
 */
function dropzones3_permission() {
  return array(
    'administer dropzones3' => array(
      'title' => t('Administer DropzoneS3'),
      'description' => t("Change DropzoneS3's global settings"),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dropzones3_menu() {
  $items['js/dropzones3/sign'] = array(
    'page callback' => 'dropzones3_sign',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // Endpoint for JS Library to notify Drupal of successful upload.
  $items['js/dropzones3/notify'] = array(
    'page callback' => 'dropzones3_notify',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/media/dropzones3'] = array(
    'title' => t('DropzoneS3 settings'),
    'description' => t('Set default AWS credentials, region, and bucket for DropzoneS3 elements.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dropzones3_admin_form'),
    'access arguments' => array('administer dropzones3'),
    'file' => 'dropzones3.admin.inc',
  );
  return $items;
}

/**
 * Sign the request with AWS private key if conditions are met.
 */
function dropzones3_sign() {
  $form_parents = func_get_args();
  // Fucntion 'ajax_get_form' expects form_build_id in POST.
  $_POST['form_build_id'] = $form_build_id = (string) array_pop($form_parents);

  // Ensure form_build_id is valid.
  list($form, $form_state) = ajax_get_form();

  // Get the current element and count the number of files.
  $current_element = $form;
  foreach ($form_parents as $parent) {
    $current_element = $current_element[$parent];
  }

  // Require filename and filesize be present validated as well.
  // This could be bypassed but makes things a little more difficult.
  $file = new stdClass();
  if (!($file->filename = $_POST['name']) || !($file->filesize = $_POST['size']) || !empty(file_validate($file, $current_element['#upload_validators']))) {
    drupal_add_http_header('Status', '400 Bad Request');
    drupal_exit();
  }
  // Check for an upload location and make use of it.
  $base_dir = file_uri_target($current_element["#upload_location"]);
  $directory = 's3://';
  if (!empty($base_dir)) {
    $directory .= "$base_dir/";
  }
  $uri = file_create_filename($file->filename, $directory) . '-' . md5(uniqid(mt_rand(), TRUE));
  $key = file_uri_target($uri);
  $date = new DateTime('NOW', new DateTimeZone('UTC'));
  $signature = _dropzones3_get_signature($date);

  $data = array(
    "date" => $date->format('c'),
    "signature" => $signature,
    "key" => $key,
  );
  // Prepare to send JSON text to the browser.
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  print drupal_json_encode($data);
  drupal_exit();
}

/**
 * Signature is scoped to service (s3), region, and date, with private key.
 */
function _dropzones3_get_signature($date) {
  $k_date = hash_hmac(
    'sha256', $date->format("Ymd"),
    "AWS4" . variable_get('dropzones3_aws_secret_key'),
    TRUE
    );

  $k_region = hash_hmac(
    'sha256', variable_get('dropzones3_aws_region'), $k_date, TRUE
    );
  $k_service = hash_hmac(
    'sha256', "s3", $k_region, TRUE
    );
  $k_signing = hash_hmac(
    'sha256', "aws4_request", $k_service
    );
  return $k_signing;
}

/**
 * Ajax endpoint saves a file once its been uploaded.
 */
function dropzones3_notify() {
  global $user;
  $form_parents = func_get_args();
  // Fucntion 'ajax_get_form' expects form_build_id in POST.
  $_POST['form_build_id'] = $form_build_id = (string) array_pop($form_parents);
  // Ensure form_build_id is valid.
  list($form, $form_state) = ajax_get_form();
  // Process user input. $form and $form_state are modified in the process.
  drupal_process_form($form['#form_id'], $form, $form_state);
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  print drupal_json_encode(array('fid' => $file->fid));
  drupal_exit();
}

/**
 * Implements hook_theme().
 */
function dropzones3_theme($existing, $type, $theme, $path) {
  $module_path = drupal_get_path('module', 'dropzones3');
  return array(
    'dropzones3_template' => array(
      'render element' => 'template',
    ),
    'dropzones3' => array(
      'render element' => 'element',
      'template' => 'dropzones3',
      'path' => $module_path . '/templates',
    ),
    'dropzones3-item' => array(
      'render element' => 'element',
      'template' => 'dropzones3-item',
      'path' => $module_path . '/templates',
    ),
  );
}

/**
 * Theme function for wrapping the template as needed for Backbone.View.render.
 *
 * By default, Drupal.Backbone.View uses Underscore templating and the
 * element's DOM ID to extract the template source.
 *
 * @param array $variables
 *   Variables array containing the id and source for the template.
 *
 *   Note: all template sources provided by modules should be provided by theme
 *   functions as well, so they can be overridden at the theme level as desired.
 *
 * @return string
 *   The HTML for the wrapped template.
 */
function theme_dropzones3_template($variables = array()) {
  $template_id = $variables['template']['#template_id'];
  $template_source = $variables['template']['#template_source'];
  return <<<TEMPLATE
  <script id="{$template_id}" type="text/template">
    {$template_source}
  </script>
TEMPLATE;
}

/**
 * Implements hook_page_build().
 *
 * Add the templates to the render array for the page, at the bottom of the
 * page. Taken from backbone module.
 */
function dropzones3_page_build(&$page) {
  $templates = drupal_static('dropzones3_templates', array());
  foreach ((array) $templates as $template_id => $template_source) {
    $page['page_bottom']['dropzones3_templates'][] = array(
      '#theme' => 'dropzones3_template',
      '#template_id' => $template_id,
      '#template_source' => $template_source,
    );
  }
}

/**
 * Add template to array of templates to be included in page.
 *
 * Uses a global to store array, attaches at hook_page_build.
 *
 * @param string $template_id
 *   The id of this template, will be the selector used in Backbone View.
 * @param string $template_source
 *   The source code of the template.
 *
 *   Note: all template sources provided by modules should be provided by theme
 *   functions as well, so they can be overridden at the theme level as desired.
 */
function dropzones3_add_template($template_id, $template_source) {
  $templates = & drupal_static('dropzones3_templates', array());
  $templates[$template_id] = $template_source;
}

/**
 * Implements hook_libraries_info().
 *
 * Use DropzoneS3 and CryptoJS.
 */
function dropzones3_libraries_info() {
  $libraries['cryptojs'] = array(
    'name' => 'CryptoJS',
    'vendor url' => 'https://code.google.com/p/crypto-js/',
    'version callback' => 'dropzones3_simple_version_callback',
    'files' => array(
      'js' => array('rollups/hmac-sha256.js'),
    ),
  );
  $libraries['dropzones3'] = array(
    'name' => 'Dropzone S3',
    'vendor url' => 'https://github.com/adamsro/dropzones3',
    'version callback' => 'dropzones3_simple_version_callback',
    'files' => array(
      // 'js' => array('dist/dropzones3.min.js'),
      'js' => array('src/dropzones3.js'),
      'css' => array('dist/dropzones3.css'),
    ),
  );
  return $libraries;
}

/**
 * Ddont check library versions.
 */
function dropzones3_simple_version_callback() {
  return TRUE;
}
